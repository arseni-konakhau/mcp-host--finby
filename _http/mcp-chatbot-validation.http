### MCP-LLM Chatbot API Validation Tests
### This file contains HTTP requests for testing the MCP-LLM service (MCP Host) using VSCode REST Client extension
### Tests the complete chain: MCP-Host (mcp-llm) -> MCP-Client (localhost:3335) -> MCP-Server (localhost:9000)

# =============================================
# =============================================
# SETUP INSTRUCTIONS
# =============================================
# =============================================
# 1. Ensure Atlassian MCP server is running on http://localhost:9000
#    Command: uv run mcp-atlassian --transport streamable-http --port 9000 --env-file .env --verbose
#
# 2. Ensure MCP client application is running on http://localhost:3335
#    (Java service that bridges to MCP server)
#
# 3. Ensure MCP-LLM application is running on http://localhost:3336
#    Command: ./gradlew bootRun (with proper environment variables)
#
# 4. Set up environment variables for MCP-LLM:
#    - DEEPSEEK_API_TOKEN: Your DeepSeek API token
#    - API_KEY: Optional API key for endpoint security
#
# 5. Run tests in sequence to validate complete workflow
# 6. Monitor all service logs for detailed debugging information

# =============================================
# CONFIGURATION
# =============================================
@baseUrl = http://localhost:3336
@apiKey = your-api-key-here














# =============================================
# =============================================
# HEALTH CHECK / CONNECTIVITY
# =============================================
# =============================================

### 1.1 Health Check - Basic connectivity test
GET {{baseUrl}}/api/chat/health
Accept: application/json

### Expected Response: "MCP-LLM Service is running"

### 1.2 Health Check with Actuator endpoint
GET {{baseUrl}}/actuator/health
Accept: application/json

### Expected Response: {"status": "UP", ...}

### 1.3 Application Info
GET {{baseUrl}}/actuator/info
Accept: application/json

### Expected Response: Application info with version, build details, etc.
















# =============================================
# =============================================
# GENERAL CHAT (NON-MCP) TESTS
# =============================================
# =============================================

### 2.1 Basic Chat Message - Simple greeting (should NOT trigger MCP)
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "Hello, how are you today?",
  "userId": "test-user-001"
}

### Expected Response: General LLM response without MCP integration

### 2.2 General Question - Weather query (should NOT trigger MCP)
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "What's the weather like in New York?",
  "context": {
    "location": "New York",
    "timezone": "EST"
  },
  "userId": "test-user-002"
}

### Expected Response: General LLM response explaining it cannot access weather data

### 2.3 Programming Question - General coding help (should NOT trigger MCP)
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "How do I implement a binary search algorithm in Java?",
  "userId": "test-user-003"
}

### Expected Response: General LLM response with programming guidance

### 2.4 Math Question - Simple calculation (should NOT trigger MCP)
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "What is 25 * 47 + 123?",
  "userId": "test-user-004"
}

### Expected Response: General LLM response with calculation
















# =============================================
# =============================================
# JIRA-RELATED QUERIES (SHOULD TRIGGER MCP)
# =============================================
# =============================================


### 3.1 Jira Search - Basic issue search (SHOULD trigger MCP): rm "context" from payload
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "Show me all JIRA issues",
  "userId": "test-user-jira-001"
}

### Expected Response: ChatResponse with intent.type = "MCP_ACTION" and mcpResult containing Jira issues


### 3.2 Jira User Issues - Personal assignment query (SHOULD trigger MCP)
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "What issues are assigned to me in Jira?",
  "userId": "test-user-jira-002"
}

### Expected Response: ChatResponse with MCP integration showing user's assigned issues

### 3.3 Jira Issue Details - Specific issue lookup (SHOULD trigger MCP)
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "Get details for issue SMP-1",
  "userId": "test-user-jira-003"
}

### Expected Response: ChatResponse with detailed issue information from MCP

### 3.4 Jira Status Query - Issue status check (SHOULD trigger MCP)
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "What's the status of issue SMP-1 and who is it assigned to?",
  "userId": "test-user-jira-004"
}

### Expected Response: ChatResponse with issue status and assignee information

### 3.5 Jira Sprint Information - Agile board query (SHOULD trigger MCP)
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "Show me the current active sprint for project SMP",
  "userId": "test-user-jira-005"
}

### Expected Response: ChatResponse with active sprint information

### 3.6 Jira Create Issue Request - Issue creation (SHOULD trigger MCP if write enabled)
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "Create a new issue in JIRA ticket with title 'TEST via mcp-llm' in project SMP",
  "userId": "test-user-jira-006"
}

### Expected Response: ChatResponse with issue creation result or read-only mode message

### 3.7 Jira Complex Query - Multi-criteria search (SHOULD trigger MCP)
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "Find all high priority bugs in JIRA project that are not completed",
  "userId": "test-user-jira-007"
}

### Expected Response: ChatResponse with filtered search results




















# =============================================
# =============================================
# CONFLUENCE-RELATED QUERIES (SHOULD TRIGGER MCP)
# =============================================
# =============================================

### 4.1 Confluence Search - Basic page search (SHOULD trigger MCP)
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "Find all pages in Confluence",
  "userId": "test-user-confluence-001"
}

### Expected Response: ChatResponse with Confluence search results

### 4.2 Confluence Space Search - Space-specific query (SHOULD trigger MCP)
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "Show me all pages in the DEV space that mention API",
  "userId": "test-user-confluence-002"
}

### Expected Response: ChatResponse with space-filtered search results

### 4.3 Confluence Page Details - Specific page lookup (SHOULD trigger MCP)
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "Get the content of the 'Project Documentation' page from DEV space",
  "userId": "test-user-confluence-003"
}

### Expected Response: ChatResponse with page content

### 4.4 Confluence Create Page Request - Page creation (SHOULD trigger MCP if write enabled)
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "Create a new page called 'API Testing Guide' in the DEV space with basic content about testing APIs",
  "userId": "test-user-confluence-004"
}

### Expected Response: ChatResponse with page creation result or read-only mode message

















# =============================================
# =============================================
# MULTI-SERVICE QUERIES (SHOULD TRIGGER MCP)
# =============================================
# =============================================

### 5.1 Cross-Platform Search - Jira and Confluence combined (SHOULD trigger MCP)
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "Find documentation for the user authentication feature and check if there are any related open bugs in Jira",
  "userId": "test-user-multi-001"
}

### Expected Response: ChatResponse with results from both Jira and Confluence

### 5.2 Project Overview - Complete project status (SHOULD trigger MCP)
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "Give me a complete overview of project SMP including current issues, documentation, and sprint status",
  "userId": "test-user-multi-002"
}

### Expected Response: ChatResponse with comprehensive project information

### 5.3 Feature Analysis - Feature-specific investigation (SHOULD trigger MCP)
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "I need to understand the current status of our microservices architecture project. Can you help me find all related Jira epics, their current progress, any blockers, and also check if there's documentation in Confluence about the deployment strategy?",
  "userId": "test-user-multi-003"
}

### Expected Response: ChatResponse with detailed feature analysis




















# =============================================
# =============================================
# INTENT ANALYSIS EDGE CASES
# =============================================
# =============================================

### 6.1 Ambiguous Query - Could be general or MCP (test intent analysis)
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "What are the current issues?",
  "userId": "test-user-ambiguous-001"
}

### Expected Response: ChatResponse with clarification request or general response

### 6.2 Mixed Context - General question with Jira context (test intent analysis)
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "How do I improve my productivity?",
  "userId": "test-user-ambiguous-002"
}

### Expected Response: ChatResponse with general productivity advice (should NOT trigger MCP)

### 6.3 Jira Keywords in General Context - False positive test
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "I'm reading about project management and issues in software development. Can you explain the concept of technical debt?",
  "userId": "test-user-ambiguous-003"
}

### Expected Response: ChatResponse with general explanation (should NOT trigger MCP)

### 6.4 Explicit MCP Request - Clear intent signal
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "Please search Jira for all issues in project SMP that are assigned to me",
  "userId": "test-user-explicit-001"
}

### Expected Response: ChatResponse with MCP integration (SHOULD trigger MCP)






















# =============================================
# =============================================
# ERROR HANDLING & VALIDATION
# =============================================
# =============================================

### 7.1 Empty Message - Validation error test
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "",
  "userId": "test-user-error-001"
}

### Expected Response: HTTP 400 Bad Request with validation error

### 7.2 Missing Required Field - Validation error test
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "userId": "test-user-error-002"
}

### Expected Response: HTTP 400 Bad Request with validation error

### 7.3 Invalid JSON - Malformed request test
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "Test message",
  "userId": "test-user-error-003",
  "invalidField": 
}

### Expected Response: HTTP 400 Bad Request with JSON parsing error

### 7.4 Large Message - Size limit test
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "This is a very long message that tests the system's ability to handle large inputs. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.",
  "userId": "test-user-large-001"
}

### Expected Response: ChatResponse handling large input appropriately

### 7.5 Special Characters - Unicode and special character test
POST {{baseUrl}}/api/chat/message
Content-Type: application/json; charset=utf-8
Accept: application/json

{
  "message": "Search for issues with title containing 'API & Database' or 'User's Profile' with émojis 🔥 and special chars: @#$%^&*()",
  "userId": "test-user-unicode-用户"
}

### Expected Response: ChatResponse handling special characters correctly






















# =============================================
# =============================================
# PERFORMANCE & LOAD TESTING
# =============================================
# =============================================

### 8.1 Quick Response Test - Simple non-MCP query
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "Hello",
  "userId": "perf-test-001"
}

### Expected Response: Fast response without MCP integration

### 8.2 Medium Load Test - Simple MCP query
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "Show me 5 recent issues in project SMP",
  "userId": "perf-test-002"
}

### Expected Response: Moderate response time with MCP integration

### 8.3 Heavy Load Test - Complex MCP query
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "Give me a comprehensive analysis of all projects, including issue counts, active sprints, recent documentation updates, and team assignments",
  "userId": "perf-test-003"
}

### Expected Response: Longer response time with extensive MCP operations

### 8.4 Concurrent Request Test 1
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "Quick status check - any critical issues?",
  "userId": "concurrent-test-001"
}

### 8.5 Concurrent Request Test 2
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "Quick status check - any critical issues?",
  "userId": "concurrent-test-002"
}

### 8.6 Concurrent Request Test 3
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "Quick status check - any critical issues?",
  "userId": "concurrent-test-003"
}






















# =============================================
# =============================================
# SECURITY & AUTHENTICATION TESTS
# =============================================
# =============================================

### 9.1 Request with API Key (if security is enabled)
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json
X-API-Key: {{apiKey}}

{
  "message": "Secure request test - show me project statistics",
  "context": {
    "secure": true
  },
  "userId": "secure-user-001"
}

### Expected Response: ChatResponse with project statistics

### 9.2 Request without API Key (if security is enabled)
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "Unauthorized request test",
  "userId": "unauthorized-user-001"
}

### Expected Response: HTTP 401 Unauthorized (if API key is required) or normal response (if not required)




















# =============================================
# =============================================
# CORS & CONTENT-TYPE TESTS
# =============================================
# =============================================

### 10.1 CORS Preflight Test
OPTIONS {{baseUrl}}/api/chat/message
Origin: http://localhost:3000
Access-Control-Request-Method: POST
Access-Control-Request-Headers: Content-Type

### Expected Response: CORS headers allowing the request

### 10.2 Content-Type Variations Test
POST {{baseUrl}}/api/chat/message
Content-Type: application/json; charset=utf-8
Accept: application/json

{
  "message": "Testing with explicit charset",
  "userId": "charset-test-001"
}

### Expected Response: Normal ChatResponse

### 10.3 Accept Header Variations Test
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json, text/plain

{
  "message": "Testing with multiple accept types",
  "userId": "accept-test-001"
}

### Expected Response: JSON ChatResponse

# =============================================
# =============================================
# INTEGRATION WORKFLOW TESTS
# =============================================
# =============================================

### 11.1 Complete User Workflow - Discovery Phase
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "I'm new to this project. Can you help me understand what projects are available and what I'm assigned to?",
  "context": {
    "userRole": "new-team-member"
  },
  "userId": "workflow-user-001"
}

### Expected Response: ChatResponse with project overview and user assignments

### 11.2 Complete User Workflow - Investigation Phase
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "I need to work on the authentication feature. Show me related issues and documentation",
  "context": {
    "feature": "authentication",
    "workType": "development"
  },
  "userId": "workflow-user-001"
}

### Expected Response: ChatResponse with feature-specific information

### 11.3 Complete User Workflow - Status Update Phase
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "I've completed work on issue SMP-1. Can you help me update its status and log my work time?",
  "context": {
    "issueKey": "SMP-1",
    "workCompleted": true,
    "timeSpent": "4h"
  },
  "userId": "workflow-user-001"
}

### Expected Response: ChatResponse with status update results (or read-only mode message)

# =============================================
# =============================================
# CONTEXT HANDLING TESTS
# =============================================
# =============================================

### 12.1 Rich Context Test - Extensive context information
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "Analyze the current sprint progress for our team",
  "context": {
    "sprint": "Sprint-2025-Q1-03",
    "team": "Backend Development",
    "projects": ["SMP", "DEV", "TEST"],
    "metrics": {
      "velocity": 45,
      "burndown": "on-track",
      "blockers": 2
    },
    "stakeholders": ["product-manager", "tech-lead", "scrum-master"],
    "timeline": {
      "start": "2025-01-15",
      "end": "2025-01-29"
    }
  },
  "userId": "context-test-001"
}

### Expected Response: ChatResponse utilizing rich context for detailed analysis

### 12.2 Minimal Context Test - Basic context
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "Show me my issues",
  "context": {
    "user": "current"
  },
  "userId": "context-test-002"
}

### Expected Response: ChatResponse with user's assigned issues

### 12.3 No Context Test - Message only
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "What can you help me with?",
  "userId": "context-test-003"
}

### Expected Response: ChatResponse with general help information

# =============================================
# =============================================
# RESPONSE FORMAT VALIDATION
# =============================================
# =============================================

### 13.1 Response Structure Test - Verify ChatResponse format
POST {{baseUrl}}/api/chat/message
Content-Type: application/json
Accept: application/json

{
  "message": "Get issue SMP-1 details",
  "userId": "response-format-test-001"
}

### Expected Response Structure:
# {
#   "response": "string - LLM generated response",
#   "intent": {
#     "type": "MCP_ACTION|GENERAL_CHAT|CLARIFICATION",
#     "confidence": "number - confidence score",
#     "reasoning": "string - why this intent was chosen",
#     "extractedParameters": "object - parameters extracted from message"
#   },
#   "mcpResult": "object - MCP tool execution results (if applicable)",
#   "success": "boolean - overall operation success",
#   "error": "string - error message (if applicable)"
# }

# =============================================
# =============================================
# CURL EXAMPLES FOR AUTOMATION
# =============================================
# =============================================

### Health Check with curl
# curl -X GET {{baseUrl}}/api/chat/health

### Basic Chat with curl
# curl -X POST {{baseUrl}}/api/chat/message \
#   -H "Content-Type: application/json" \
#   -d '{
#     "message": "Hello, how are you?",
#     "userId": "curl-test-001"
#   }'

### Jira Query with curl
# curl -X POST {{baseUrl}}/api/chat/message \
#   -H "Content-Type: application/json" \
#   -d '{
#     "message": "Show me all open issues in project SMP",
#     "context": {"jiraProject": "SMP"},
#     "userId": "curl-test-002"
#   }'

### Confluence Query with curl
# curl -X POST {{baseUrl}}/api/chat/message \
#   -H "Content-Type: application/json" \
#   -d '{
#     "message": "Find documentation about API testing",
#     "context": {"searchTerm": "API testing"},
#     "userId": "curl-test-003"
#   }'

### Secure Request with curl (if API key required)
# curl -X POST {{baseUrl}}/api/chat/message \
#   -H "Content-Type: application/json" \
#   -H "X-API-Key: your-api-key-here" \
#   -d '{
#     "message": "Secure request test",
#     "userId": "curl-secure-001"
#   }'

# =============================================
# =============================================
# TESTING WORKFLOW & VALIDATION CHECKLIST
# =============================================
# =============================================
# Recommended testing sequence:
#
# 1. HEALTH CHECK / CONNECTIVITY:
#    ✓ Verify MCP-LLM service is running (health endpoints)
#    ✓ Confirm all dependent services are operational
#    ✓ Test basic API connectivity
#
# 2. GENERAL CHAT (NON-MCP):
#    ✓ Test simple greetings and general questions
#    ✓ Verify intent analysis correctly identifies non-MCP requests
#    ✓ Confirm LLM responses for general queries
#
# 3. JIRA FUNCTIONALITY (MCP INTEGRATION):
#    ✓ Test issue search and retrieval
#    ✓ Test user-specific queries
#    ✓ Test project and sprint information
#    ✓ Test issue creation requests (if write operations enabled)
#    ✓ Verify MCP chain: MCP-Host -> MCP-Client -> MCP-Server
#
# 4. CONFLUENCE FUNCTIONALITY (MCP INTEGRATION):
#    ✓ Test page search and content retrieval
#    ✓ Test space-specific queries
#    ✓ Test page creation requests (if write operations enabled)
#    ✓ Verify MCP integration for documentation queries
#
# 5. MULTI-SERVICE QUERIES:
#    ✓ Test cross-platform searches (Jira + Confluence)
#    ✓ Test comprehensive project analysis
#    ✓ Verify complex intent analysis
#
# 6. INTENT ANALYSIS EDGE CASES:
#    ✓ Test ambiguous queries
#    ✓ Test false positive scenarios
#    ✓ Test explicit MCP requests
#    ✓ Verify confidence scoring
#
# 7. ERROR HANDLING:
#    ✓ Test validation errors (empty messages, missing fields)
#    ✓ Test malformed requests
#    ✓ Test large message handling
#    ✓ Test special character support
#
# 8. PERFORMANCE TESTING:
#    ✓ Test response times for different query types
#    ✓ Test concurrent request handling
#    ✓ Test complex query performance
#
# 9. SECURITY & AUTHENTICATION:
#    ✓ Test API key authentication (if enabled)
#    ✓ Test unauthorized access handling
#    ✓ Test CORS functionality
#
# 10. INTEGRATION WORKFLOWS:
#     ✓ Test complete user workflows
#     ✓ Test context handling
#     ✓ Test response format consistency
#
# Expected outcomes:
# - Health checks return success status
# - General chat queries receive LLM responses without MCP integration
# - Jira/Confluence queries trigger MCP chain and return structured results
# - Intent analysis correctly categorizes requests
# - Error handling provides meaningful feedback
# - Performance meets acceptable thresholds
# - Security measures function as configured
# - Complete workflows execute end-to-end successfully

# =============================================
# =============================================
# DEBUGGING & TROUBLESHOOTING GUIDE
# =============================================
# =============================================
# Common issues and solutions:
#
# 1. MCP-LLM Service Issues:
#    - Check if service is running on port 3336
#    - Verify environment variables (DEEPSEEK_API_TOKEN)
#    - Check application logs for startup errors
#    - Ensure Java 17+ is installed
#
# 2. MCP Client Connection Issues:
#    - Verify MCP client is running on port 3335
#    - Check network connectivity between services
#    - Review MCP client logs for connection errors
#    - Test MCP client independently using mcp-client-validation.http
#
# 3. MCP Server Connection Issues:
#    - Ensure Atlassian MCP server is running on port 9000
#    - Verify Atlassian credentials and permissions
#    - Check MCP server logs for authentication errors
#    - Test MCP server independently using altlassian-mcp-server-validation.http
#
# 4. Intent Analysis Issues:
#    - Check DeepSeek API connectivity and token validity
#    - Review intent analysis prompts and confidence thresholds
#    - Monitor LLM response times and rate limits
#    - Verify intent analysis service configuration
#
# 5. Response Format Issues:
#    - Check ChatResponse model structure
#    - Verify JSON serialization/deserialization
#    - Review error handling and response mapping
#    - Test with different message types and contexts
#
# 6. Performance Issues:
#    - Monitor service response times
#    - Check for timeout configurations
#    - Review concurrent request handling
#    - Analyze memory and CPU usage
#
# 7. Authentication Issues:
#    - Verify API key configuration (if enabled)
#    - Check CORS settings for web clients
#    - Review security configuration
#    - Test with and without authentication headers
#
# Debugging steps:
# 1. Start with health checks to verify basic connectivity
# 2. Test each service independently before testing the chain
# 3. Use simple queries before complex ones
# 4. Monitor logs from all services during testing
# 5. Test non-MCP queries first to isolate LLM issues
# 6. Test MCP queries to verify integration chain
# 7. Use curl for command-line testing and automation
# 8. Check network connectivity and firewall settings
# 9. Verify all environment variables are properly set
# 10. Review service startup logs for configuration issues



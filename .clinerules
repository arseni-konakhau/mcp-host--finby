# MCP-LLM Project Intelligence

## Project Overview
MCP-LLM is a Spring Boot application that serves as an intelligent bridge between Large Language Models (specifically DeepSeek) and Model Context Protocol (MCP) clients. It enables natural language interaction with Atlassian tools (Jira/Confluence) through sophisticated intent analysis and tool orchestration.

## Key Implementation Patterns

### Architecture Decisions
- **Reactive Programming**: Uses Spring WebFlux for non-blocking I/O and better scalability
- **Orchestration Pattern**: ChatOrchestrationService coordinates all operations
- **Strategy Pattern**: IntentAnalysisService uses LLM-based strategy for intent detection
- **Adapter Pattern**: McpClientService adapts between internal interfaces and external MCP API

### Configuration Management
- **Environment-driven**: All sensitive data externalized via environment variables
- **Validation**: Uses Jakarta validation with @NotBlank and custom validators
- **Type-safe**: Configuration properties as records with proper typing
- **Test profiles**: Separate configuration for testing with mock values

### Critical Implementation Details
1. **Property Naming**: DeepSeekProperties expects `api-url`, `api-token`, `timeout` (not `base-url`)
2. **Test Configuration**: Requires application-test.properties with @ActiveProfiles("test")
3. **WebClient Setup**: Separate clients for DeepSeek and MCP with different timeouts
4. **Error Handling**: Comprehensive error mapping with graceful degradation

### Service Integration Points
- **DeepSeek API**: External LLM service for natural language processing
- **MCP Client**: Java service (port 3332) for MCP protocol communication
- **MCP Server**: Python Atlassian server (indirect via MCP client)

### Development Workflow
1. **Build**: `./gradlew build` - includes compilation and testing
2. **Test**: `./gradlew test` - runs unit tests with test profile
3. **Run**: `./gradlew bootRun` - starts application (requires environment setup)
4. **Clean**: `./gradlew clean` - clears build artifacts

### Known Patterns and Solutions
- **Configuration Validation Errors**: Ensure property names match exactly in configuration classes
- **Test Failures**: Always use test profile and provide all required properties
- **Generic Type Warnings**: Expected in DeepSeekService due to WebClient response handling
- **Memory Bank Updates**: Follow the established structure with all 6 core files

### Environment Requirements
- Java 17+ (required for Spring Boot 3.x)
- DeepSeek API token for LLM integration
- MCP Client service running on localhost:3332
- Optional API key for endpoint security

### Project Status
- **Implementation**: 100% complete
- **Testing**: Working test suite with proper configuration
- **Documentation**: Complete memory bank structure
- **Build**: Successful with all dependencies resolved
- **Ready for**: Integration testing and deployment

## Memory Bank Maintenance
The project follows the established memory bank pattern with:
- projectbrief.md: Core requirements and goals
- productContext.md: User experience and problem statement
- systemPatterns.md: Architecture and design patterns
- techContext.md: Technology stack and constraints
- activeContext.md: Current status and recent changes
- progress.md: Completion tracking and next steps

Always update memory bank files when making significant changes or discoveries about the project.
